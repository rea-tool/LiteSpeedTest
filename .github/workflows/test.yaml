name: Build

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" workflow
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [linux]
        goarch: [amd64,arm64]
      fail-fast: false    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
  
    - name: Show workflow information
      id: get_filename
      run: |
        export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM\"].friendlyName" -r < release/friendly-filenames.json)
        echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, RELEASE_NAME: $_NAME"
        echo "::set-output name=ASSET_NAME::$_NAME"
        echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV    
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18.1 # The Go version to download (if necessary) and use.
    
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Cache go module
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-      
    
    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        GOOS=js GOARCH=wasm go get -u ./...
        GOOS=js GOARCH=wasm go build -o ./web/main.wasm ./wasm
    
        
    # Run build of the application
    - name: Run build
      run: go build -o lite
    
    # Run testing on the code
    - name: Run testing
      if: matrix.goos != 'windows'
      run: ls -thla lite

    - name: Create ZIP archive
      run: |
        zip -9vr lite-$ASSET_NAME.zip lite
        FILE=./lite-$ASSET_NAME.zip

    - name: Upload ZIP file to Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: lite-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
        path: lite-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
